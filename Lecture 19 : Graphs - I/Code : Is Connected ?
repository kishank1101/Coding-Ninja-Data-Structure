// Code : Is Connected ?
// Send Feedback
// Given an undirected graph G(V,E), check if the graph G is connected graph or not.
// V is the number of vertices present in graph G and vertices are numbered from 0 to V-1.
// E is the number of edges present in graph G.
// Input Format :
// Line 1: Two Integers V and E (separated by space)
// Next 'E' lines, each have two space-separated integers, 'a' and 'b', denoting that there exists an edge between Vertex 'a' and Vertex 'b'.
// Output Format :
// "true" or "false"
// Constraints :
// 2 <= V <= 1000
// 1 <= E <= 1000
// Sample Input 1:
// 4 4
// 0 1
// 0 3
// 1 2
// 2 3
// Sample Output 1:
// true
// Sample Input 2:
// 4 3
// 0 1
// 1 3 
// 0 3
// Sample Output 2:
// false 
// Sample Output 2 Explanation
// The graph is not connected, even though vertices 0,1 and 3 are connected to each other but there isnâ€™t any path from vertices 0,1,3 to vertex 2. 
#include <bits/stdc++.h>

using namespace std;
#define ll long long
#define pb push_back
map <ll,ll> hm;
ll mod = 1e9+7;

void dfs(vector<vector<int>> graph, vector<bool>& visited,int node)
{
    for(int i = 0;i<graph[node].size();i++)
    {
        int cur = graph[node][i];
        if(!visited[cur])
        {
            visited[cur]=true;
            dfs(graph,visited,cur);
        }
        
    }
}

int main() {
ios_base::sync_with_stdio(false);
cin.tie(NULL);
    int v,e;
    cin>>v>>e;
    vector<vector<int>> graph(v);
    for(int i = 0;i<e;i++)
    {
        int u,v;
        cin>>u>>v;
        graph[u].pb(v);
        graph[v].pb(u);
    }
    vector<bool> visited(v);
    for(int i = 0;i<v;i++)
    {
        visited[i]=false;
    }
    visited[0]=true;
    dfs(graph,visited,0);
    int flag = 0;
    for(int i = 0;i<v;i++)
    {
        if(visited[i]==false)
        {
            flag =1 ;
        }
    }
    if(flag==1)
    {
        cout<<"Not connected!"<<endl;
    }
    else cout<<"Connected!"<<endl;
}
