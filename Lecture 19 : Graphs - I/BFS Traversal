// Code : BFS Traversal
// Send Feedback
// Given an undirected and disconnected graph G(V, E), print its BFS traversal.
// Here you need to consider that you need to print BFS path starting from vertex 0 only.
// V is the number of vertices present in graph G and vertices are numbered from 0 to V-1.
// E is the number of edges present in graph G.
// Note : 1. Take graph input in the adjacency matrix.
// 2. Handle for Disconnected Graphs as well
// Input Format :
// Line 1: Two Integers V and E (separated by space)
// Next 'E' lines, each have two space-separated integers, 'a' and 'b', denoting that there exists an edge between Vertex 'a' and Vertex 'b'.
// Output Format :
// BFS Traversal (separated by space)
// Constraints :
// 2 <= V <= 1000
// 1 <= E <= 1000
// Sample Input 1:
// 4 4
// 0 1
// 0 3
// 1 2
// 2 3
// Sample Output 1:
// 0 1 3 2
#include <bits/stdc++.h>

using namespace std;
#define ll long long
#define pb push_back
map <ll,ll> hm;
ll mod = 1e9+7;

int main() {
ios_base::sync_with_stdio(false);
cin.tie(NULL);
    int v,e;
    cin>>v>>e;
    vector<vector<int>> graph(v);
    for(int i = 0;i<e;i++)
    {
        int u,v;
        cin>>u>>v;
        graph[u].pb(v);
        graph[v].pb(u);
    }
    vector<bool> visited(v);
    for(int i = 0;i<v;i++)
    {
        visited[i]=false;
    }
    visited[0]=true;
    queue<int> q;
    q.push(0);
    while(!q.empty())
    {
        int node = q.front();
        cout<<node<<" ";
        q.pop();
        for(int i = 0;i<graph[node].size();i++)
        {
            int cur = graph[node][i];
            if(!visited[cur])
            {
                visited[cur]=true;
                q.push(cur);
            }
        }
    }
}
