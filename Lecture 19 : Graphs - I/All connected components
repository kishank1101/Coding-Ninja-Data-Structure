// Code : All connected components
// Send Feedback
// Given an undirected graph G(V,E), find and print all the connected components of the given graph G.
// V is the number of vertices present in graph G and vertices are numbered from 0 to V-1.
// E is the number of edges present in graph G.
// You need to take input in main and create a function which should return all the connected components. And then print them in the main, not inside function.
// Print different components in new line. And each component should be printed in increasing order (separated by space). Order of different components doesn't matter.
// Input Format :
// Line 1: Two Integers V and E (separated by space)
// Next 'E' lines, each have two space-separated integers, 'a' and 'b', denoting that there exists an edge between Vertex 'a' and Vertex 'b'.
// Output Format :
// Different components in new line
// Constraints :
// 2 <= V <= 1000
// 1 <= E <= 1000
// Sample Input 1:
// 4 2
// 0 1
// 2 3
// Sample Output 1:
// 0 1 
// 2 3 
// Sample Input 2:
// 4 3
// 0 1
// 1 3 
// 0 3
// Sample Output 2:
// 0 1 3 
// 2

#include <bits/stdc++.h>

using namespace std;
#define ll long long
#define pb push_back
map <ll,ll> hm;
ll mod = 1e9+7;

void dfs(vector<vector<int>> graph, vector<bool>& visited,int node)
{
    cout<<node<<" ";
    for(int i = 0;i<graph[node].size();i++)
    {
        int cur = graph[node][i];
        if(!visited[cur])
        {
            visited[cur]=true;
            dfs(graph,visited,cur);
        }
    }
}

int main() {
ios_base::sync_with_stdio(false);
cin.tie(NULL);
    int v,e;
    cin>>v>>e;
    vector<vector<int>> graph(v);
    for(int i = 0;i<e;i++)
    {
        int u,v;
        cin>>u>>v;
        graph[u].pb(v);
        graph[v].pb(u);
    }
    vector<bool> visited(v);
    for(int i = 0;i<v;i++)
    {
        visited[i]=false;
    }
    for(int i = 0;i<v;i++)
    {
        if(!visited[i])
        {
            visited[i]=true;
            dfs(graph,visited,i);
            cout<<endl;
        }
    }
}
