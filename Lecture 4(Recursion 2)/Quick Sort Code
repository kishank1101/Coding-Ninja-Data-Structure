// Quick Sort Code
// Send Feedback
// Sort an array A using Quick Sort.
// Change in the input array itself. So no need to return or print anything.
// Input format :
// Line 1 : Integer n i.e. Array size
// Line 2 : Array elements (separated by space)
// Output format :
// Array elements in increasing order (separated by space)
// Constraints :
// 1 <= n <= 1000
// Sample Input:
// 6 
// 2 6 8 5 4 3
// Sample Output:
// 2 3 4 5 6 8

#include <bits/stdc++.h>

using namespace std;
#define ll long long
#define pb push_back
map <int,int> hm;
ll mod = 1e9+7;

int partition(int* arr,int low,int high)
{
    int pivot = arr[high]; // pivot is always last element in this type of qsort
    int i = low-1;
    for(int j = low;j<high;j++)
    {
        if(arr[j]<pivot)
        {
            i++;
            swap(arr[i],arr[j]);
        }
        
    }
    swap(arr[i+1],arr[high]);
    return i+1;
}

void quicksort(int* arr,int low,int high)
{
    if(low<high)
    {
        int pi = partition(arr,low,high); //arr[pi] is now at right place
        quicksort(arr,low,pi-1);
        quicksort(arr,pi+1,high);
    }
}

int main() {
ios_base::sync_with_stdio(false);
cin.tie(NULL);
    int n;
    cin>>n;
    int arr[n];
    for(int i = 0;i<n;i++)
    {
        cin>>arr[i];
    }
    quicksort(arr,0,n-1);
    for(int i = 0;i<n;i++)
    {
        cout<<arr[i]<<" ";
    }
    cout<<endl;
}
