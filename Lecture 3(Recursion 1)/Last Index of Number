// Last Index of Number
// Send Feedback
// Given an array of length N and an integer x, 
// you need to find and return the last index of integer x present in the array.
//     Return -1 if it is not present in the array.
// Last index means - if x is present multiple times in the array, 
// return the index at which x comes last in the array.
// You should start traversing your array from 0, not from (N - 1).
// Do this recursively. Indexing in the array starts from 0.
// Input Format :
// Line 1 : An Integer N i.e. size of array
// Line 2 : N integers which are elements of the array, separated by spaces
// Line 3 : Integer x
// Output Format :
// last index or -1
// Constraints :
// 1 <= N <= 10^3
// Sample Input :
// 4
// 9 8 10 8
// 8
// Sample Output :
// 3

#include <bits/stdc++.h>

using namespace std;
#define ll long long
#define pb push_back
map <ll,ll> hm;
ll mod = 1e9+7;

void solve(int* arr,int n,int cur,int key,int* ans)
{
    if(cur==n)
    {
        return;
    }
    if(arr[cur]==key)
    {
        *ans = cur;
    }
     solve(arr,n,cur+1,key,ans);
}

int main() {
ios_base::sync_with_stdio(false);
cin.tie(NULL);
    int n;
    cin>>n;
    int arr[n];
    for(int i = 0;i<n;i++)
    {
        cin>>arr[i];
    }
    int key;
    cin>>key;
    int ans=-1;
    solve(arr,n,0,key,&ans);
    cout<<ans<<endl;
}
