// Code: Minimum Count of Squares
// Send Feedback
// Given an integer N, find and return the count of minimum numbers, sum of whose squares is equal to N.
// That is, if N is 4, then we can represent it as : {1^2 + 1^2 + 1^2 + 1^2} and {2^2}. Output will be 1, as 1 is the minimum count of numbers required.
// Note : x^y represents x raise to the power y.
// Input Format :
// Integer N
// Output Format :
// Required minimum count
// Constraints :
// 1 <= N <= 1000
// Sample Input 1 :
// 12
// Sample Output 1 :
// 3
// Sample Output 1 Explanation :
// 12 can be represented as :
// 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1
// 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 2^2
// 1^1 + 1^1 + 1^1 + 1^1 + 2^2 + 2^2
// 2^2 + 2^2 + 2^2
// As we can see, the output should be 3.
// Sample Input 2 :
// 9
// Sample Output 2 :
// 1
#include <bits/stdc++.h>

using namespace std;
#define ll long long
#define pb push_back
map <ll,ll> hm;
ll mod = 1e9+7;

int main() {
ios_base::sync_with_stdio(false);
cin.tie(NULL);
    int n;
    cin>>n;
    int dp[n+1];
    for(int i = 0;i<=n;i++)
    {
        dp[i]=i;
    }

    for(int i = 4;i<=n;i++)
    {
        for(int j = 1;j*j<=i;j++)
        {
            int temp = j*j;
            dp[i]=min(dp[i],1+dp[i-temp]);
        }
    }
    cout<<dp[n]<<endl;
}
