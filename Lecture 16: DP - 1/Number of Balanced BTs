// Code: Number of Balanced BTs
// Send Feedback
// Given an integer h, find the possible number of balanced binary trees of height h. You just need to return the count of possible binary trees which are balanced.
// This number can be huge, so return output modulus 10^9 + 7.
// Write a simple recursive solution.
// Input Format :
// Integer h
// Output Format :
// Count % 10^9 + 7
// Input Constraints :
// 1 <= h <= 40
// Sample Input 1:
// 3
// Sample Output 1:
// 15
// Sample Input 2:
// 4
// Sample Output 2:
// 315
#include <bits/stdc++.h>

using namespace std;
#define ll long long
#define pb push_back
map <ll,ll> hm;
ll mod = 1e9+7;

int main() {
ios_base::sync_with_stdio(false);
cin.tie(NULL);
    int h;
    cin>>h;
    int dp[h+1];
    dp[0]=1;
    dp[1]=1;
    for(int i = 2;i<=h;i++)
    {
        dp[i]=(dp[i-1]*dp[i-1])%mod+(dp[i-1]*dp[i-2])%mod+(dp[i-2]*dp[i-1])%mod;
        dp[i]=dp[i]%mod;
    }
    cout<<dp[h];
}
