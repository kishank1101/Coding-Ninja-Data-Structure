// Code: Min Steps to One
// Send Feedback
// Given a positive integer n, find the minimum number of steps s, that takes n to 1. You can perform any one of the following 3 steps.
// 1.) Subtract 1 from it. (n= n - Â­1) ,
// 2.) If its divisible by 2, divide by 2.( if n%2==0, then n= n/2 ) ,
// 3.) If its divisible by 3, divide by 3. (if n%3 == 0, then n = n / 3 ).  
// Just write brute-force recursive solution for this.
// Input format :
// Line 1 : A single integer i.e. n
// Output format :
// Line 1 : Single integer i.e number of steps
// Constraints :
// 1 <= n <= 500
// Sample Input 1 :
// 4
// Sample Output 1 :
// 2 
// Sample Output 1 Explanation :
// For n = 4
// Step 1 : n = 4/2 = 2
// Step 2 : n = 2/2 = 1
// Sample Input 2 :
// 7
// Sample Output 2 :
// 3
#include <bits/stdc++.h>

using namespace std;
#define ll long long
#define pb push_back
map <ll,ll> hm;
ll mod = 1e9+7;

int main() {
ios_base::sync_with_stdio(false);
cin.tie(NULL);
    int n;
    cin>>n;
    int dp[n+2];
    memset(dp,0,sizeof(dp));
    dp[1]=1;
    dp[2]=1;
    dp[3]=1;
    for(int i= 4;i<=n;i++)
    {
        int a1 = 1000000;
        int b1 = 1000000;
        int c1 = 1000000;
        if(i%3==0)
        {
            a1=dp[i/3]+1;
        }
        if(i%2==0)
        {
            b1=dp[i/2]+1;
        }
        c1=dp[i-1]+1;
        dp[i]=min(a1,min(b1,c1));
    }
    cout<<dp[n]<<endl;
}
