// Ways To Make Coin Change
// Send Feedback
// You are given an infinite supply of coins of each of denominations D = {D0, D1, D2, D3, ...... Dn-1}. You need to figure out the total number of ways W, in which you can make change for Value V using coins of denominations D.
// Note : Return 0, if change isn't possible.
// Input Format
// Line 1 : Integer n i.e. total number of denominations
// Line 2 : N integers i.e. n denomination values
// Line 3 : Value V
// Output Format
// Line 1 :  Number of ways i.e. W
// Constraints :
// 1<=n<=10
// 1<=V<=1000
// Sample Input 1 :
// 3
// 1 2 3
// 4
// Sample Output
// 4
// Sample Output Explanation :
// Number of ways are - 4 total i.e. (1,1,1,1), (1,1, 2), (1, 3) and (2, 2).

#include <bits/stdc++.h>

using namespace std;
#define ll long long
#define pb push_back
map <ll,ll> hm;
ll mod = 1e9+7;

int solve(int* arr,int n,int v)
{
    if(v==0)
    {
        return 1;
    }
    else if(v<0 || n<=0)
    {
        return 0;
    }
    else if(arr[n-1]<=v)
    {
        return solve(arr,n-1,v-arr[n-1])+solve(arr,n,v-arr[n-1]);
    }
    else return solve(arr,n-1,v);
}

int main() {
ios_base::sync_with_stdio(false);
cin.tie(NULL);
    int n;
    cin>>n;
    int arr[n];
    for(int i = 0;i<n;i++)
    {
        cin>>arr[i];
    }
    int v;
    cin>>v;
    cout<<solve(arr,n,v)<<endl;
    int dp[n+1][v+1];
    for(int i = 0;i<=n;i++)
    {
        for(int j = 0;j<=v;j++)
        {
            if(i==0)
            {
                dp[i][j]=0;
            }
            else if(j==0)
            {
                dp[i][j]=1;
            }
            else if(arr[i-1]<=j)
            {
                dp[i][j]=dp[i-1][j]+dp[i][j-arr[i-1]];
            }
            else dp[i][j]=dp[i-1][j];
        }
    }
    cout<<dp[n][v]<<endl;
}
