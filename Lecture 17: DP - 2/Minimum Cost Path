// Code : Minimum Cost Path
// Send Feedback
// Given an integer matrix of size m*n, you need to find out the value of minimum cost to reach from the cell (0, 0) to (m-1, n-1).
// From a cell (i, j), you can move in three directions : (i+1, j), (i, j+1) and (i+1, j+1).
// Cost of a path is defined as the sum of values of each cell through which path passes.
// Input Format :
// Line 1 : Two integers, m and n
// Next m lines : n integers of each row (separated by space)
// Output Format :
// Minimum cost
// Constraints :
// 1 <= m, n <= 20
// Sample Input 1 :
// 3 4
// 3 4 1 2
// 2 1 8 9
// 4 7 8 1
// Sample Output 1 :
// 13
#include <bits/stdc++.h>

using namespace std;
#define ll long long
#define pb push_back
map <ll,ll> hm;
ll mod = 1e9+7;

int rec(vector<vector<int>> matrix,int n,int m,int i,int j)
{
    if(i==m-1 && j==n-1)
    {
        return matrix[i][j];
    }
    else if(i>=m || j>=n)
    {
        return INT_MAX;
    }
    else
    {
        int x = rec(matrix,n,m,i+1,j);
        int y = rec(matrix,n,m,i+1,j+1);
        int z = rec(matrix,n,m,i,j+1);
        return min(x,min(y,z))+matrix[i][j];
    }
}

int main() {
ios_base::sync_with_stdio(false);
cin.tie(NULL);
    int m,n;
    cin>>m>>n;
    vector <vector<int>> matrix(m);
    for(int i = 0;i<m;i++)
    {
        for(int j = 0;j<n;j++)
        {
            int x;
            cin>>x;
            matrix[i].pb(x);
        }
    }
    cout<<rec(matrix,n,m,0,0);
    
}
