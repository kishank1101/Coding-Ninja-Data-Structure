// Delete Node in LL
// Send Feedback
// Given a linked list and a position i, delete the node of ith position from Linked List iteratively.
// If position i is greater than length of LL, then you should return the same LL without any change.
// Indexing starts from 0. You don't need to print the elements, just delete the node and return the head of updated LL.
// Input format :
// Line 1 : Linked list elements (separated by space and terminated by -1)
// Line 2 : Integer i (position)
// Output format :
// Updated LL elements (separated by space)
// Sample Input 1 :
// 3 4 5 2 6 1 9 -1
// 3
// Sample Output 1 :
// 3 4 5 6 1 9
// Sample Input 2 :
// 3 4 5 2 6 1 9 -1
// 0
// Sample Output 2 :
// 4 5 2 6 1 9

#include <bits/stdc++.h>

using namespace std;
#define ll long long
#define pb push_back
map <ll,ll> hm;
ll mod = 1e9+7;

struct node{
    int data;
    node* next;
    node(int x){
        data = x;
        next = NULL;
    }
};

node* solve(node* head,int n)
{
    node* temp = head;
    int count = 0;
    if(n==0)
    {
        head = head->next;
        delete(temp);
        return head;
    }
    while(count<n-1)
    {
        count++;
        temp = temp->next;
    }
    temp->next = temp->next->next;
    
    return head;
}

int main() {
ios_base::sync_with_stdio(false);
cin.tie(NULL);
    node* head = NULL;
    node* temp = head;
    while(1)
    {
        int x;
        cin>>x;
        if(x==-1)
        {
            break;
        }
        if(head==NULL)
        {
            head = new node(x);
            temp = head;
        }
        else
        {
            temp->next = new node(x);
            temp = temp->next;
        }
    }
    int n;
    cin>>n;
    head = solve(head,n);
    temp = head;
    while(temp)
    {
        cout<<temp->data<<" ";
        temp = temp->next;
    }
}
