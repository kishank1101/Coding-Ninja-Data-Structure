// Find a node in LL
// Send Feedback
// Given a linked list and an integer n you need to find and return index where n is present in the LL. Do this iteratively.
// Return -1 if n is not present in the LL.
// Indexing of nodes starts from 0.
// Input format :
// Line 1 : Linked list elements (separated by space and terminated by -1)
// Line 2 : Integer n 
// Output format :
// Index
// Sample Input 1 :
// 3 4 5 2 6 1 9 -1
// 5
// Sample Output 1 :
// 2
// Sample Input 2 :
// 3 4 5 2 6 1 9 -1
// 6
// Sample Output 2 :
// 4

#include <bits/stdc++.h>

using namespace std;
#define ll long long
#define pb push_back
map <ll,ll> hm;
ll mod = 1e9+7;

struct node{
    int data;
    node* next;
    node(int x){
        data = x;
        next = NULL;
    }
};

int solve(node* head,int key)
{
    node* temp = head;
    int i = 0;
    while(temp)
    {
        if(temp->data == key)
        {
            return i;
        }
        temp = temp->next;
        i++;
    }
    return -1;
}

int main() {
ios_base::sync_with_stdio(false);
cin.tie(NULL);
    node* head = NULL;
    node* temp = head;
    while(1)
    {
        int x;
        cin>>x;
        if(x==-1)
        {
            break;
        }
        if(head==NULL)
        {
            head = new node(x);
            temp = head;
        }
        else
        {
            temp->next = new node(x);
            temp = temp->next;
        }
    }
    int key;
    cin>>key;
    int ans = solve(head,key);
    cout<<ans<<endl;
}
